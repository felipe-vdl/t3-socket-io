import { GetServerSideProps } from "next";
import { prisma } from "@/server/db";
import { Entry } from "@prisma/client";

import { useEffect, useState } from "react";
import Head from "next/head";
import useSocket from "@/hooks/useSocket";

interface IndexProps {
  dbEntries: Entry[];
}

export default function Home({ dbEntries }: IndexProps) {
  const [entries, setEntries] = useState<Entry[]>(dbEntries);

  const socket = useSocket();
  useEffect(() => {
    if (socket) {
      socket.on("connect", () => {
        console.log("Connected");
      });

      socket.on("new-entry", (entry: Entry) => {
        setEntries((st) => [entry, ...st]);
      });

      return () => {
        socket.off("connect");
        socket.off("new-entry");
      };
    }
  }, [socket]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1 className="bg-amber-600 py-2 text-center text-white">Testing</h1>
      <div className="flex flex-1 flex-col">
        {entries.map((d, i) => (
          <pre
            key={`${i}-${d.id}-${Math.floor(Math.random() * 9999)}`}
            className={`${
              i % 2 === 0 ? "bg-stone-700" : "bg-stone-500"
            } p-4 text-white`}
          >
            {d.json?.toString()}
          </pre>
        ))}
      </div>
    </>
  );
}

export const getServerSideProps = async (
  context: GetServerSideProps<IndexProps>
) => {
  const dbEntries = await prisma.entry.findMany({
    orderBy: {
      id: "desc",
    },
  });

  return {
    props: {
      dbEntries: JSON.parse(JSON.stringify(dbEntries)),
    },
  };
};
